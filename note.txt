access	check accessibility of a file
		unistd.h - int access(const char *path, int mode);
dup		duplicate an existing file descriptor
		unistd.h - int dup(int fildes);
dup2	duplicate an existing file descriptor, close fildes2, cp fildes1 to fildes2
		unistd.h - int dup2(int fildes, int fildes2);
execve	execute a file
		unistd.h - int execve(const char *path, char *const argv[], char *const envp[]);
fork	create a new process
		unistd.h - pid_t fork(void);
pipe	create descriptor pair for interprocess communication
		unistd.h - int pipe(int fildes[2]);
unlink	remove directory entry
		unistd.h - int unlink(const char *path);
wait	wait for process termination
		sys/wait.h - pid_t wait(int *stat_loc);
waitpid	wait for process termination
		sys/wait.h - pid_t waitpid(pid_t pid, int *stat_loc, int options);
